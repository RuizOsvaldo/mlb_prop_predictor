from datetime import datetime
import statsapi
from pybaseball import batting_stats, pitching_stats, playerid_lookup
import pandas as pd

def get_today_schedule():
    today = datetime.now().strftime('%Y-%m-%d')
    return statsapi.schedule(date=today)

def get_boxscore(game_id):
    return statsapi.get('game_boxscore', {'gamePk': game_id})

def extract_starters(players):
    hitters = []
    pitcher = None
    for p in players.values():
        person = p.get('person', {})
        position = p.get('position', {}).get('abbreviation', 'NA')
        pid = person.get('id')
        name = person.get('fullName')
        bo = p.get('battingOrder')
        if bo and int(bo) > 0:
            hitters.append({
                'id': pid,
                'name': name,
                'position': position,
                'batting_order': int(bo) // 100
            })
        elif position == 'P':
            pitcher = {
                'id': pid,
                'name': name,
                'position': 'P'
            }
    hitters.sort(key=lambda x: x['batting_order'])
    return hitters, pitcher

def find_mlbam_id(name):
    parts = name.split()
    if len(parts) < 2:
        return None
    first_name = parts[0]
    last_name = parts[-1]
    try:
        lookup = playerid_lookup(last_name, first_name)
        if not lookup.empty:
            return lookup.iloc[0]['key_mlbam']
    except:
        return None
    return None

def print_lineups_with_stats(year):
    bat_df = batting_stats(year)
    pit_df = pitching_stats(year)
    schedule = get_today_schedule()
    if not schedule:
        print("No games scheduled today.")
        return

    print(f"MLB Starting Lineups & Sabermetrics for {datetime.now().strftime('%Y-%m-%d')}")
    for game in schedule:
        game_id = game['game_id']
        boxscore = get_boxscore(game_id)
        teams = boxscore['teams']
        for side in ['away', 'home']:
            team_name = teams[side]['team']['name']
            players = teams[side]['players']
            hitters, pitcher = extract_starters(players)
            print(f"\n{team_name} Lineup:")
            for h in hitters:
                mlbam_id = find_mlbam_id(h['name'])
                stats_row = bat_df[bat_df['IDfg'] == mlbam_id] if mlbam_id else pd.DataFrame()
                if not stats_row.empty:
                    stats = stats_row.iloc[0]
                    print(f"  {h['batting_order']}. {h['name']} ({h['position']}): PA={stats['PA']}, AVG={stats['AVG']}, OBP={stats['OBP']}, SLG={stats['SLG']}, OPS={stats['OPS']}, wOBA={stats['wOBA']}, wRC+={stats['wRC+']}")
                else:
                    print(f"  {h['batting_order']}. {h['name']} ({h['position']}): No stats found")
            if pitcher:
                mlbam_id = find_mlbam_id(pitcher['name'])
                stats_row = pit_df[pit_df['IDfg'] == mlbam_id] if mlbam_id else pd.DataFrame()
                if not stats_row.empty:
                    stats = stats_row.iloc[0]
                    print(f"  SP: {pitcher['name']} ({pitcher['position']}): IP={stats['IP']}, ERA={stats['ERA']}, FIP={stats['FIP']}, WHIP={stats['WHIP']}, K/9={stats['K/9']}, BB/9={stats['BB/9']}, WAR={stats['WAR']}")
                else:
                    print(f"  SP: {pitcher['name']} ({pitcher['position']}): No stats found")

if __name__ == "__main__":
    year = 2025  # Change to desired season
    print_lineups_with_stats(year)